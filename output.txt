#include\t<iostream>\nusing\tnamespace\tstd;\ntypedef\tstruct\tnode{\n\t\t\t\tint\tdata;\n\t\t\t\tstruct\tnode*\tnext;\n}\tlink;\n\nvoid\tprint(link*\tl){\n\t\t\t\twhile\t(l->next)\n\t\t\t\t{\n\t\t\t\t\t\t\t\tcout\t<<\tl->data\t<<\t"\t";\n\t\t\t\t\t\t\t\tl\t=\tl->next;\n\t\t\t\t}\n\t\t\t\tcout\t<<\tl->data;\n}\nvoid\tprint_rev(link*\tl){\n\t\t\t\tint\tx\t=\tl->data;\n\t\t\t\tif(l->next)\n\t\t\t\t{\n\t\t\t\t\t\t\t\tl\t=\tl->next;\n\t\t\t\t\t\t\t\tprint_rev(l);\n\t\t\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tcout\t<<\tx\t<<\t"\t";\n}\nvoid\tadd_end(link*\t&L,int\tx){\n\t\t\t\tlink\t*l;\n\t\t\t\tl\t=\tL;\n\t\t\t\twhile\t(l->next)\n\t\t\t\t{\n\t\t\t\t\t\t\t\tl\t=\tl->next;\n\t\t\t\t}\n\t\t\t\tlink\t*t;\n\t\t\t\tt\t=\tnew\t(link);\n\t\t\t\tt->data\t=\tx;\n\t\t\t\tt->next\t=\tnullptr;\n\t\t\t\tl->next\t=\tt;\n}\nvoid\tadd_front(link*\t&L,int\tx){\n\t\t\t\t\tif(L->next){\n\t\t\t\t\t\t\t\t\tlink\t*T;\n\t\t\t\t\t\t\t\t\tT\t=\tnew\t(link);\n\t\t\t\t\t\t\t\t\tT->data\t=\tx;\n\t\t\t\t\t\t\t\t\tT->next\t=\tL;\n\t\t\t\t\t\t\t\t\tL\t=\tT;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcout\t<<\t"underflow";\n\t\t\t\t\t}\n\t\t\t\t\t\n}\nvoid\tdelete_front(link*\t&L){\n\t\t\t\tif(L->next)\n\t\t\t\t\t\t\t\tL\t=\tL->next;\n\t\t\t\telse\n\t\t\t\t\t\t\t\tcout\t<<\t"underflow";\n}\nvoid\tdelete_end(link*\t&L){\n\t\t\t\tlink\t*l;\n\t\t\t\tl\t=\tL;\n\t\t\t\twhile\t(l->next)\n\t\t\t\t{\n\t\t\t\t\t\t\t\tif(!l->next->next){\n\t\t\t\t\t\t\t\t\t\t\t\tl->next\t=\tnullptr;\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tl\t=\tl->next;\n\t\t\t\t}\n}\nvoid\tinsert(link*\t&L,int\tpos,int\tval){\n\t\t\t\t//inserts\tafter\tpos+1\tindex\n\t\t\t\tlink\t*l;\n\t\t\t\tl\t=\tL;\n\t\t\t\tint\tpresent\t=\t0;\n\t\t\t\twhile(pos!=present){\n\t\t\t\t\t\t\t\tl\t=\tl->next;\n\t\t\t\t\t\t\t\tpresent++;\n\t\t\t\t}\n\t\t\t\tlink\t*T;\n\t\t\t\tT\t=\tnew\t(link);\n\t\t\t\tT->data\t=\tval;\n\t\t\t\tT->next\t=\tl->next;\n\t\t\t\tl->next\t=\tT;\n}\nvoid\treplace(link*\tL,int\tpos,int\tval){\n\t\t\t\t//replaces\t\tpos\tposition\telement\t.For\tpos\tindex\tpresent\t=\t2;\n\t\t\t\tlink\t*l;\n\t\t\t\tl\t=\tL;\n\t\t\t\tint\tpresent\t=\t1;\n\t\t\t\twhile\t(pos\t!=\tpresent)\n\t\t\t\t{\n\t\t\t\t\t\t\t\tl\t=\tl->next;\n\t\t\t\t\t\t\t\tpresent++;\n\t\t\t\t}\n\t\t\t\tl->data\t=\tval;\n}\nvoid\tfind(link*\tl,int\tk){\n\t\t\t\twhile\t(l->next)\n\t\t\t\t{\n\t\t\t\t\t\t\t\tif(k==l->data)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tcout\t<<\t1;\n\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tl\t=\tl->next;\n\t\t\t\t}\n\t\t\t\tif(l->data==k)\n\t\t\t\t\t\t\t\tcout\t<<\t1;\n\t\t\t\telse\n\t\t\t\t\t\t\t\tcout\t<<\t0;\n}\nvoid\tnumber_of_elements(link*\tl){\n\t\t\t\tint\todd_counter\t=\t0;\n\t\t\t\tint\teven_counter\t=\t0;\n\t\t\t\twhile(l->next){\n\t\t\t\t\t\t\t\tif(l->data\t%2==0)\n\t\t\t\t\t\t\t\t\t\t\t\teven_counter++;\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\todd_counter++;\n\t\t\t\t\t\t\t\tl\t=\tl->next;\n\t\t\t\t}\n\t\t\t\tif\t(l->data\t%\t2\t==\t0)\n\t\t\t\t\t\t\t\teven_counter++;\n\t\t\t\telse\n\t\t\t\t\t\t\t\todd_counter++;\n\t\t\t\tcout\t<<\todd_counter;\n\t\t\t\tcout\t<<\t"\n";\n\t\t\t\tcout\t<<\teven_counter;\n}\nint\tget_length(link*\tl){\n\t\t\t\tint\tlen\t=\t0;\n\t\t\t\twhile(l->next){\n\t\t\t\t\t\t\t\tlen++;\n\t\t\t\t\t\t\t\tl\t=\tl->next;\n\t\t\t\t}\n\t\t\t\treturn\tlen+1;//pre\tfor\tfirst\telement\tpost\tfor\tlast\telement\n}\nint\tget_max(link*\tl){\n\t\t\t\tint\tm\t=\tl->data;\n\t\t\t\twhile\t(l->next)\n\t\t\t\t{\n\t\t\t\t\t\t\t\tl\t=\tl->next;\n\t\t\t\t\t\t\t\tm\t=\tm\t>\tl->data\t?\tm\t:\tl->data;\n\t\t\t\t}\n\t\t\t\tm\t=\tm\t>\tl->data\t?\tm\t:\tl->data;\n\t\t\t\treturn\tm;\n}\nint\tget_min(link\t*l)\n{\n\t\t\t\tint\tm\t=\tl->data;\n\t\t\t\twhile\t(l->next)\n\t\t\t\t{\n\t\t\t\t\t\t\t\tl\t=\tl->next;\n\t\t\t\t\t\t\t\tm\t=\tm\t<\tl->data\t?\tm\t:\tl->data;\n\t\t\t\t}\n\t\t\t\tm\t=\tm\t<\tl->data\t?\tm\t:\tl->data;\n\t\t\t\treturn\tm;\n}\nint\tget_middle(link*\tsl){\n\t\t\t\tlink\t*fast_pointer;\n\t\t\t\tfast_pointer=sl;\n\t\t\t\twhile(fast_pointer->next){\n\t\t\t\t\t\t\t\tfast_pointer\t=\tfast_pointer->next;\n\t\t\t\t\t\t\t\tsl\t=\tsl->next;\n\t\t\t\t\t\t\t\tif(fast_pointer->next)\n\t\t\t\t\t\t\t\t\t\t\t\tfast_pointer\t=\tfast_pointer->next;\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn\tsl->data;\n}\nint\tfind_even(link\t*l)\n{\n\t\t\t\twhile\t(l->next)\n\t\t\t\t{\n\t\t\t\t\t\t\t\tif\t(l->data\t%\t2\t==\t0)\n\t\t\t\t\t\t\t\t\t\t\t\treturn\t1;\n\t\t\t\t\t\t\t\tl\t=\tl->next;\n\t\t\t\t}\n\t\t\t\tif\t(l->data\t%\t2\t==\t0)\n\t\t\t\t\t\t\t\treturn\t1;\n\t\t\t\telse\n\t\t\t\t\t\t\t\treturn\t-1;\n}\n\nint\tmain(){\n\t\t\t\tint\tn;\n\n\t\t\t\tlink\t*L;\n\t\t\t\tL\t=\tnew\t(link);\n\n\t\t\t\tint\tx;\n\t\t\t\tcin\t>>\tx;\n\t\t\t\tL->data\t=\tx;\n\t\t\t\tL->next\t=\tnullptr;\n\n\t\t\t\twhile(true){\n\t\t\t\t\t\t\t\tcin\t>>\tx;\n\t\t\t\t\t\t\t\tif(x==-1)\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tadd_end(L,\tx);\n\t\t\t\t}\n\t\t\t\tlink\t*t;\n\t\t\t\tt\t=\tL->next;\n\t\t\t\tcout\t<<\tfind_even(t);\n}\n